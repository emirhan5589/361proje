
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module EE314_GROUP38(

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// IR //////////
	input 		          		IRDA_RXD,
	output		          		IRDA_TXD,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// Video-In //////////
	input 		          		TD_CLK27,
	input 		     [7:0]		TD_DATA,
	input 		          		TD_HS,
	output		          		TD_RESET_N,
	input 		          		TD_VS,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire [2:0] vga_r_3bit_internal; 
    wire [2:0] vga_g_3bit_internal; 
    wire [1:0] vga_b_2bit_internal; 


    // Internal Wires
	 
    wire p1_move_left_cmd;
    wire p1_move_right_cmd;
    wire p1_attack_cmd;       
    wire p1_confirm_cmd;      
	 
    
	 wire clk_25mhz_pixel;
		wire clk_game;
		
    wire [9:0] current_pixel_x;
    wire [9:0] current_pixel_y;
    wire current_display_enable;
	
    wire [9:0] char_x_pos;
    wire [9:0] char_y_pos;
    wire [9:0] char_width;
    wire [9:0] char_height;
    wire [7:0] char_color_332;	// RRRGGGBB from test pattern generator

    wire [7:0] background_pixel_color_332;  // Output of background_generator
    wire [7:0] char_rendered_pixel_color_332;        // Color output of character_renderer
    wire       char_is_visible_at_pixel;    // Visibility flag from character_renderer
    wire [7:0] final_pixel_color_to_vga_332; // Output of graphics_mixer

    // Menu screen signals
    wire [7:0] menu_pixel_color_332;
    wire [3:0] menu_mode_hex;
    wire [9:0] menu_leds;
    wire       menu_start_game;

	 wire [1:0]  attack_phase;
	 
	   wire frame_sync;
    wire vblank;

game_clocks clocks_inst (
    .clk_50Mhz_in (CLOCK_50),
    .reset_in     (1'b0),
    .sw1_in       (SW[1]),
    .key_step_in  (KEY[0]),
	.clk_25Mhz_out(clk_25mhz_pixel),
	.clk_60Hz_out(clk_game),
	.frame_sync_in(frame_sync)
	);
	 
    input_handler player1_input_inst (
        .clk_50Mhz(CLOCK_50),
        .clk_60Hz_game(clk_game),
        .reset(1'b0),
        .p1_key_left_raw_in(KEY[1]),    
        .p1_key_right_raw_in(KEY[2]),   
        .p1_key_attack_raw_in(KEY[3]),  
        .p1_key_confirm_raw_in(1'b0), 
        .p1_move_left_cmd_out(p1_move_left_cmd),
        .p1_move_right_cmd_out(p1_move_right_cmd),
        .p1_attack_cmd_out(p1_attack_cmd),
        .p1_confirm_cmd_out(p1_confirm_cmd)
    );
	 
    player_logic player1_logic_inst (
        .clk_game(clk_game),
        .reset(1'b0),
        .move_left_cmd_in(p1_move_left_cmd),
        .move_right_cmd_in(p1_move_right_cmd),
		  .p1_attack_cmd_in(p1_attack_cmd),
        // Outputs character properties
        .char_x_pos_out(char_x_pos),
        .char_y_pos_out(char_y_pos),
        .char_width_out(char_width),
        .char_height_out(char_height),
        .char_color_out_332(char_color_332),
		  .attack_phase_out(attack_phase)
    );
	 
    // --- Test Pattern Generator ---
    background_generator background_gen_inst (      
        .pixel_clk(clk_25mhz_pixel),             
        .reset(1'b0),
        .display_enable(current_display_enable),
        .pixel_x(current_pixel_x),               
        .pixel_y(current_pixel_y),               
        .color_out_332(background_pixel_color_332) 
    );
	 
    character_renderer char_render_inst (
        .display_enable(current_display_enable),
        .current_pixel_x(current_pixel_x),
        .current_pixel_y(current_pixel_y),
        .char_x_pos_in(char_x_pos),             
        .char_y_pos_in(char_y_pos),             
        .char_width_in(char_width),             
        .char_height_in(char_height),           
        .char_color_in_332(char_color_332),     
        .char_pixel_color_out_332(char_rendered_pixel_color_332),
        .char_is_visible_at_pixel_out(char_is_visible_at_pixel),
		  .attack_phase_in(attack_phase)
    );
	 
	 

graphics_mixer mixer_inst (
    .background_color_in_332    (background_pixel_color_332),
    .char_color_in_332    (char_rendered_pixel_color_332),
    .display_enable(current_display_enable),
    .pixel_x                    (current_pixel_x),
    .pixel_y                    (current_pixel_y),
    .char_x_pos                 (char_x_pos),
    .char_y_pos                 (char_y_pos),
    .char_width                 (char_width),
    .char_height                (char_height),
    .attack_phase               (attack_phase),
    .final_pixel_color_out_332  (final_pixel_color_to_vga_332)
);

    // --- Menu Screen ---
    menu_screen menu_inst (
        .display_enable(current_display_enable),
        .pixel_x(current_pixel_x),
        .pixel_y(current_pixel_y),
        .sw0_mode_select(SW[0]),
        .p1_buttons(~KEY[3:0]),
        .color_out_332(menu_pixel_color_332),
        .mode_hex(menu_mode_hex),
        .leds_out(menu_leds),
        .start_game(menu_start_game)
    );

    // --- VGA Controller ---
    vga_driver vga_controller_inst (
        .pixel_clk(clk_25mhz_pixel),
        .reset(1'b0),
        .color_in_332(menu_pixel_color_332),

        // Outputs for pattern generator's reference
        .pixel_x(current_pixel_x),
        .pixel_y(current_pixel_y),
        .display_enable(current_display_enable),

        // Outputs to physical VGA connector pins
        .vga_hsync(VGA_HS),
        .vga_vsync(VGA_VS),
        .vga_r_out(vga_r_3bit_internal),
        .vga_g_out(vga_g_3bit_internal),
        .vga_b_out(vga_b_2bit_internal),
		  .frame_sync(frame_sync),     
        .vblank(vblank) 
    );





//=======================================================
//  Structural coding
//=======================================================
assign VGA_BLANK_N = current_display_enable; 
assign VGA_CLK     = clk_25mhz_pixel; 
assign VGA_SYNC_N  = 1'b1;

assign VGA_R = {vga_r_3bit_internal, vga_r_3bit_internal[2:1], vga_r_3bit_internal[2:0]}; 
assign VGA_G = {vga_g_3bit_internal, vga_g_3bit_internal[2:1], vga_g_3bit_internal[2:0]};
assign VGA_B = {vga_b_2bit_internal, vga_b_2bit_internal, vga_b_2bit_internal, vga_b_2bit_internal};

// --- 7-segment displays ---
hexto7seg hex0_inst (.hexn(HEX0), .hex(menu_mode_hex));

localparam [6:0] SEG_P   = 7'b0001100;
localparam [6:0] SEG_OFF = 7'b1111111;

assign HEX1 = SEG_P;
assign HEX2 = SEG_OFF;
assign HEX3 = SEG_OFF;
assign HEX4 = SEG_OFF;
assign HEX5 = SEG_OFF;

assign LEDR = menu_leds;


endmodule
